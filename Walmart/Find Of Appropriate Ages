class Solution {
public:
    int lowerBound(vector<int>&ages,int target)
    {
        int low=0;
        int high=ages.size()-1;
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            if (ages[mid]<=target)
                low=mid+1;
            else 
                high=mid-1;
        }
        return low;
    }
    int numFriendRequests(vector<int>& ages) 
    {
        sort(ages.begin(),ages.end());
        int ans=0;
        for (int i=0;i<ages.size();i++)
        {
            int idx1 = lowerBound(ages,ages[i]*0.5+7);
            int idx2 = lowerBound(ages,ages[i]);
            ans += max(idx2 - idx1 - 1,0);
        }
        return ans;
    }
};


